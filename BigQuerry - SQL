Big Querry - Armazenamento de dados dados 
SQL (Structured Query Language) - linguagem de programação para armazenar e processar informações de um banco de dados
Access: console.cloud.google.com/bigquery
É possível acessae dados públicos

SITES PARA TREINAR SQL E OUTRAS LINGUAGENS: 
CoodWars: https://www.codewars.com/
Exercism: https://exercism.org/
Breecrowd: https://www.beecrowd.com.br/judge/en/login


Comandos:
-----------------------------------------------------------------------------------------------------------------------
SELECT - select a collum and displays in the output
  SELECT * - produces one output column for each column that is visible after executing the full query 
  SELECT * EXCEPT
  SELECT * REPLACE
  SELECT DISTINCT
  SELECT ALL - statement returns all rows, including duplicate rows
  STRUCT 
  ARRAY
  SELECT AS VALUE
  FROM
UNNEST

CTE (comom table expression) - tabela virtual
  recorrente
  não recorrente
-----------------------------------------------------------------------------------------------------------------------
#SELECT COMMON 

WITH
produce AS (
  SELECT 
    'apple' as fruit,
    'spinach' as vegetable
)

# Option-1
/*
SELECT * 
from produce
*/

# Option-2
/*
select 
  fruit,
  vegetable
from produce
*/

# Option-3
/*
Select 
  p.fruit,
  p.vegetable 
From produce as p
*/

# option-4
Select 
  produce.fruit,
  produce.vegetable 
From produce
;
-----------------------------------------------------------------------------------------------------------------------
# SELECT * EXCEPT
Aciona a tabela, com as exceções indicadas

WITH
cake as (
  select
    'vanilla' as flavor,
    100 as sugar_gm,
    200 as flour_gm
)

select * except(sugar_gm)
from cake
-----------------------------------------------------------------------------------------------------------------------
#SELECT * REPLACE
Substitui um valor 

WITH
cake as (
  select
    'vanilla' as flavor,
    100 as sugar_gm,
    200 as flour_gm
)
#select * replace ('chocolate' as flavor)
select * replace(sugar_gm*2 as sugar_gm)
from cake
;
-----------------------------------------------------------------------------------------------------------------------
SELECT DISTINCT
Filtra as linhas iguais

WITH
animals as (
  select 'dog' as type_of_animal, 30 as weitht_lb
  union all
  select 'dog' as type_of_animal, 15 as weitht_lb
  union all
  select 'cat' as type_of_animal, 20 as weitht_lb
  union all
  select 'cat' as type_of_animal, 20 as weitht_lb
)

select distinct *
from animals
;
-----------------------------------------------------------------------------------------------------------------------
SELECT ALL
Statement returns all rows, including duplicate rows 

WITH
animals as (
  select 'dog' as animal, 'fish' as food
  union all
  select 'dog' as animal, 'fish' as food
  union all
  select 'cat' as animal, 'bone' as food
)
select all *
from animals
;
-----------------------------------------------------------------------------------------------------------------------
STRUCT 
select struct <x int64>(1) as number;
select struct <w string>('abc') as word;
select struct <dt date>('2022-09-06') as word;

select struct <i int64, s struct <w string>>(1,struct('abc')) as nested_struct;
-----------------------------------------------------------------------------------------------------------------------
ARRAY

SELECT array<boolean>[TRUE, FALSE, FALSE, TRUE] AS bool; 
-----------------------------------------------------------------------------------------------------------------------
SELECT AS VALUE

SELECT STRUCT(1 AS a, 2 AS b);
SELECT AS value (STRUCT (1 AS a, 2 AS b));
-----------------------------------------------------------------------------------------------------------------------
FROM
/*
Instructions for use: 
FROM 'project.data set.name of the table'
*/

WITH
fruits as (
  select 'mango' as name, 100 weight_gm
  union all 
  select 'orange', 120 
)
select *
from fruits 
;
-----------------------------------------------------------------------------------------------------------------------
UNNEST
Retorna uma tabela de resultados que inclui uma linha para cada elemento da matriz especificada
Convert arrays to rows

/*
#1 example 
#SELECT * 
#FROM UNNEST ([10,20,30]) AS NUMBERS WITH OFFSET;

#2 example
select *
from unnest ([(1,11,'x'),(2,22,'y'),(3,33,'z')]);
*/

SELECT *
FROM UNNEST([
  STRUCT(1.0 AS x, 'dog' AS y),
  STRUCT(0.3, 'cat')
]) AS t;
-----------------------------------------------------------------------------------------------------------------------
UNNEST, ARRAY, STRUCT

#1 
SELECT *
FROM UNNEST (ARRAY<STRUCT<x INT64, y STRING>>[(11,'dog'),(2,'cat')]);

#2 
Select *, struct_value
from unnest(array<struct<x int64, y STRING>>[(11,'goo'),(2,'bar')]) as struct_value;
-----------------------------------------------------------------------------------------------------------------------
PIVOT and UNPIVOT
PIVOT gira uma expressão com valor de tabela ao transformar os valores exclusivos de uma coluna na expressão em várias colunas na saída. 
E PIVOT executa agregações em que elas são necessárias em quaisquer valores de coluna remanescentes que forem desejados na saída final. 
UNPIVOT executa a operação oposta à PIVOT, transformando as colunas de uma expressão com valor de tabela em valores de coluna.
-----------------------------------------------------------------------------------------------------------------------
PIVOT

WITH produce AS (
  SELECT 'Luiz' as product, 51 as sales, 'Q1' as quarter, 2020 as year UNION ALL
  SELECT 'Luiz', 23, 'Q2',2020 UNION ALL
  SELECT 'Luiz', 32, 'Q3',2020 UNION ALL
  SELECT 'Luiz', 23, 'Q4',2020 UNION ALL
  SELECT 'Luiz', 20, 'Q1',2021 UNION ALL
  SELECT 'Luiz', 2, 'Q2',2021 UNION ALL
  SELECT 'Mari', 0, 'Q1',2020 UNION ALL
  SELECT 'Mari', 5, 'Q2',2020 UNION ALL
  SELECT 'Mari', 1, 'Q1',2021 
)
SELECT *
FROM (
  SELECT product, quarter, sales, year
  FROM produce
)
PIVOT (
  #SUM(sales) FOR quarter IN ('Q1' AS Q1, 'Q2' AS Q2, 'Q3' AS Q3, 'Q4' AS Q4)
  SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4')
);
-----------------------------------------------------------------------------------------------------------------------
UNPIVOT
WITH
produce as (
  select 'Luiz' as product, 51 as Q1, 23 as Q2, 45 as Q3, 3 as Q4
  UNION ALL
  select 'apple', 77, 0, 25, 2
)

/*
#1 <--- the Qs are differents columns
select *
from produce

#2 <--- put all the Qs in a only column 
select *
from produce
UNPIVOT(sales for quarter in (Q1, Q2, Q3, Q4)) #<-- don't need quotes because Qs are the col names
;

#3 <--- get the quarters and and transform it into semester
select *
from produce
unpivot(
  (first_half_sales, second_half_sales)
  for semesters
  in ((Q1, Q2)as 'semester_1',
      (Q3, Q4) as 'semester_2'
  )
)
*/
-----------------------------------------------------------------------------------------------------------------------
TABLESAMPLE

Introduced in SQL Server 2015 TABLESAMPLE is a clause for a query which can be used to select a 
pseudo-random number of rows from a table, based upon a percentage or a number of rows and an optional seed number – 
if a repeatable result is required. It can only be used against local tables.

EXEMPLE 1:
#It doesn't work with temporary tables from WITH statement 
select 
  country_code,
  date,
  new_confirmed
  from 'bigquery-public-data.covid19_open_data.covid19_open_data' 
  TABLESAMPLE system(1 percent)
;

-----------------------------------------------------------------------------------------------------------------------
INNER JOIN
The INNER JOIN keyword selects records that have matching values in both tables.
WITH
a as (
  select *
  from unnest(array<struct<w int64, z string>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),
b as (
  select *
  from unnest(array<struct<y int64, z string>>[(2,'k'),(3,'m'),(3,'n'),(4,'p')])
)

/*
#1
select * from A
;

#2 o output é uma tabela com wy,x,z
select *
from a
  inner join b on a.w = b.y
  ;
*/
-----------------------------------------------------------------------------------------------------------------------
CROSS JOIN
Used to combine each row of one table with each row of another table,
and return the Cartesian product of the sets of rows from the tables that are joined

WITH
a as (
  select *
  from unnest(array<struct<w int64, x string>>[(1,'a'),(2,'b')])
),
b as (
  select *
  from unnest(array<struct<y int64, z string>>[(2,'k'),(3,'m')])
)

select *
from a cross join b;
-----------------------------------------------------------------------------------------------------------------------
FULL OUTER JOIN

The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

A palavra-chave FULL OUTER JOIN retorna todos os registros correspondentes de ambas as tabelas, independentemente da outra tabela 
corresponder ou não. Portanto,se houver linhas em "Clientes"que não tenham correspondências em "Pedidos", ou se houver linhas
em "Pedidos" que não tenham correspondências em "Clientes", essas linhas também serão listadas.

WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
)

SELECT *
FROM A
FULL OUTER JOIN B ON A.w = B.y;
-----------------------------------------------------------------------------------------------------------------------
LEFT OUTER JOIN 
é um tipo de junção em SQL que combina linhas de duas tabelas com base em umacondição de junção e 
retorna todas as linhas da tabela à esquerda (tabela A) e as linhas correspondentes da tabela à direita (tabela B)

WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'k'),(3,'m'),(3,'c'),(4,'p')])
)

SELECT *
FROM A
LEFT OUTER JOIN B ON A.w = B.y;
-----------------------------------------------------------------------------------------------------------------------
RIGHT OUTER JOIN - INVERSO DE RIGHT OUTER JOIN

WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
)

SELECT *
FROM A
RIGHT OUTER JOIN B ON A.w = B.y;
-----------------------------------------------------------------------------------------------------------------------
ON x USING

The USING clause is used if several columns share the same name but you don’t want to join using all of these common
columns. The columns listed in the USING clause can’t have any qualifiers in the statement, including the WHERE clause:

-- Using ON clause
SELECT *
FROM employees
JOIN departments ON employees.department_id = departments.department_id;

-- Using USING clause
SELECT *
FROM employees
JOIN departments USING (department_id);
-----------------------------------------------------------------------------------------------------------------------
JOIN operations in a sequence 

WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT *
FROM A
INNER JOIN B ON A.w = B.y
INNER JOIN C ON A.w = C.w;
-----------------------------------------------------------------------------------------------------------------------
WHERE
The WHERE clause in SQL is used to filter rows from the result set based on a specified condition.
It is typically used in conjunction with the SELECT statement, but it can also be used with other statements like UPDATE, DELETE, and INSERT

#BASIC EXAMPLE
SELECT column1, column2, ...
FROM your_table
WHERE your_condition;

#1º EXEMPLO
SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary > 50000;

#2º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT *
FROM A
INNER JOIN B ON A.w = B.y
INNER JOIN C ON A.w = C.w
WHERE A.w > 2;
-----------------------------------------------------------------------------------------------------------------------
GROUP BY ROLLUP

#BASIC EXAMPLE
SELECT column1, column2, aggregate_function(column3)
FROM your_table
GROUP BY ROLLUP (column1, column2);

#1º EXAMPLE
SELECT region, product, SUM(sales_amount) as total_sales
FROM sales
GROUP BY ROLLUP (region, product);

#2º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT A.w, B.z, COUNT(*) as count_B
FROM A
INNER JOIN B ON A.w = B.y
INNER JOIN C ON A.w = C.w
GROUP BY ROLLUP (A.w, B.z);
----------------------------------------------------------------------------------------------------
GROUP BY 
The GROUP BY clause in SQL is used to group rows that have the same values in specified columns into summary rows,
like "total" or "average". It is often used in conjunction with aggregate functions like SUM, COUNT, AVG, etc.

#BASIC EXAMPLE
SELECT column1, aggregate_function(column2)
FROM your_table
GROUP BY column1;

#1º EXAMPLE
SELECT product_id, SUM(sales_amount) as total_sales
FROM sales
GROUP BY product_id;

#2º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT A.w, COUNT(*) as count_B, MAX(C.x) as max_x
FROM A
INNER JOIN B ON A.w = B.y
INNER JOIN C ON A.w = C.w
GROUP BY A.w;
----------------------------------------------------------------------------------------------------
HAVING
The HAVING clause in SQL is used to filter the results of a GROUP BY query based on a specified condition.
It is similar to the WHERE clause, but while WHERE filters individual rows before they are grouped and aggregated,
HAVING filters the results after they have been grouped.

#BASIC EXAMPLE
SELECT column1, aggregate_function(column2)
FROM your_table
GROUP BY column1
HAVING your_condition;

#1º EXAMPLE
SELECT product_id, SUM(sales_amount) as total_sales
FROM sales
GROUP BY product_id
HAVING total_sales > 1000;

#2º EXAMPLE
SELECT product_id, SUM(sales_amount) as total_sales
FROM sales
GROUP BY product_id
HAVING total_sales > 1000;
----------------------------------------------------------------------------------------------------
ORDER BY
The ORDER BY clause in SQL is used to sort the result set of a query based on one or more columns.
It is typically used in conjunction with the SELECT statement.

#BASIC EXAMPLE
SELECT column1, column2
FROM your_table
ORDER BY column1 ASC, column2 DESC;

#1º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT A.w, COUNT(*) as count_B
FROM A
INNER JOIN B ON A.w = B.y
INNER JOIN C ON A.w = C.w
GROUP BY A.w
HAVING COUNT(*) > 1
ORDER BY A.w DESC;
----------------------------------------------------------------------------------------------------
The ORDER BY clause in SQL is used to sort the result set of a query based on one or more columns. 
It is typically used in conjunction with the SELECT statement.

#BASIC EXAMPLE
SELECT
  column1,
  column2,
  ROW_NUMBER() OVER (PARTITION BY column1 ORDER BY column2) as row_num
FROM
  your_table
QUALIFY row_num = 1;

#1º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT
  A.w,
  B.z,
  COUNT(*) OVER (PARTITION BY A.w) as count_B
FROM
  A
INNER JOIN
  B ON A.w = B.y
INNER JOIN
  C ON A.w = C.w
QUALIFY count_B > 1;
----------------------------------------------------------------------------------------------------
WINDOW
In SQL, the WINDOW clause is used in conjunction with window functions to define the window specification for the function. 
The window specification determines the set of rows within which the window function operates. 
Window functions perform a calculation across a set of table rows that are somehow related to the current row.

#1º EXAMPLE
SELECT
  column1,
  column2,
  SUM(column2) OVER w AS running_total
FROM
  your_table
WINDOW w AS (ORDER BY column1);

#2º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
),

C AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'q'),(2,'q'),(3,'s'),(4,'s')])
)

SELECT
  A.w,
  B.z,
  COUNT(*) OVER w AS count_B
FROM
  A
INNER JOIN
  B ON A.w = B.y
INNER JOIN
  C ON A.w = C.w
WINDOW w AS (PARTITION BY A.w);
----------------------------------------------------------------------------------------------------
UNION/INTERSECT/EXCEPT
The UNION operator in SQL is used to combine the result sets of two or more SELECT statements into a single result set.
It removes duplicate rows from the combined result set by default. 
Each SELECT statement within the UNION must have the same number of columns in the result sets with similar data types.

#BASIC EXAMPLE
SELECT column1, column2 FROM table1
UNION #or intersect or except
SELECT column1, column2 FROM table2;

#1º EXAMPLE
WITH A AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<w INT64, x STRING>>[(1,'a'),(2,'b'),(3,'c'),(4,'d')])
),

B AS (
  SELECT *
  FROM UNNEST (ARRAY<STRUCT<y INT64, z STRING>>[(2,'K'),(3,'M'),(3,'c'),(4,'P')])
)

-- Combine results of CTE A and CTE B using UNION
SELECT w, x FROM A
UNION
SELECT y, z FROM B;
----------------------------------------------------------------------------------------------------
LIMIT
The LIMIT and OFFSET clauses in SQL are used together to achieve pagination in query results.
They help control the number of rows returned and specify the starting point for fetching rows. 
LIMIT sets the maximum number of rows to be returned, and OFFSET specifies the number of rows to skip from the beginning.

#BASIC EXAMPLE
SELECT column1, column2
FROM your_table
ORDER BY some_column
LIMIT 10
OFFSET 20;
----------------------------------------------------------------------------------------------------
WITH
The WITH clause in SQL is used to define Common Table Expressions (CTEs). A CTE is a temporary result set that can be 
referenced within the context of a larger SQL query, allowing you to break down complex queries into more manageable parts.

#BASIC EXAMPLE
WITH CTE_name (column1, column2) AS (
  SELECT column1, column2
  FROM your_table
  WHERE some_condition
)
SELECT *
FROM CTE_name;
----------------------------------------------------------------------------------------------------
WITH RECURSIVE
The WITH RECURSIVE clause in SQL is an extension of the WITH clause that allows you to define a recursive common table expression (CTE).
Recursive CTEs are useful when dealing with hierarchical or graph-like data structures, where a query needs to refer to its own output in a recursive manner.

#1º EXAMPLE
WITH RECURSIVE Numbers(n) AS (
  SELECT 1
  UNION
  SELECT n + 1 FROM Numbers WHERE n < 5
)
SELECT * FROM Numbers;

#2º EXAMPLE
WITH RECURSIVE HierarchicalData(id, parent_id, name, depth) AS (
  SELECT id, parent_id, name, 0 AS depth
  FROM your_table
  WHERE parent_id IS NULL

  UNION ALL

  SELECT child.id, child.parent_id, child.name, parent.depth + 1
  FROM your_table child
  JOIN HierarchicalData parent ON child.parent_id = parent.id
)
SELECT id, parent_id, name, depth
FROM HierarchicalData;

----------------------------------------------------------------------------------------------------
DECLARE
The DECLARE keyword in SQL is typically used within stored procedures, functions, or triggers to declare local variables.
These local variables are used to store temporary values and facilitate operations within the scope of the stored procedure or function.

#BASIC EXAMPLE
CREATE PROCEDURE ExampleProcedure()
BEGIN
  DECLARE variable_name INT;
  SET variable_name = 42;

  -- Rest of the procedure logic using the declared variable
END;

#1º EXAMPLE
#Declare a variable
DECLARE X INT64;

#Set value for the variable
SET X = 10;

#Use the variable
SELECT X+1 AS NUM;
----------------------------------------------------------------------------------------------------
EXECUTE IMMEADIATE 
The EXECUTE IMMEDIATE statement is used in some SQL databases to dynamically execute a SQL statement or a SQL block that is represented as a string. 
This allows you to construct and execute SQL statements on the fly, which can be useful in certain 

#1º EXAMPLE
DECLARE
  sql_statement VARCHAR(100);
  result_value INT;
BEGIN
  sql_statement := 'SELECT COUNT(*) FROM your_table WHERE some_condition';
  EXECUTE IMMEDIATE sql_statement INTO result_value;
  DBMS_OUTPUT.PUT_LINE('Result: ' || result_value);
END;

#2º EXAMPLE
DECLARE Y FLOAT64;
EXECUTE IMMEDIATE "SELECT ? * (? + 2)" INTO Y USING 1, 3;
----------------------------------------------------------------------------------------------------
BEGIN END
BEGIN initiates a block of statements where declared variables exist only until only until the corresponding END.
sql_statement_list is a list of zero or more SQL statements ending with semicolons.

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------

#BASIC EXAMPLE
#1º EXAMPLE
#2º EXAMPLE
----------------------------------------------------------------------------------------------------





