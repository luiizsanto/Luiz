Problems new york subway

1º search for the problems on the internet

Problems:
- ageing infraestruture
- delays: 70.000 delays every month in 2017; 28.000 per month on 2012
- accessibility: wheelchair, elevators, ramp, stairs
- safety and security: crime in the transit system is up by more than 40%
- funding and budget
- inproved signal controls: fixed-block signealing
- car types: A, B, special, modular, opne
- automated arrival announcements
- safety 
- spacious plataform
- 4g wifi on subway stations
- maintenance: art work, deteriorating, walls, etc
- autopay
- parking
- pollution: such as the continual griding of the train wheels against the rails, the eletricity collecting shoes,
and diesel soot emissions from maintenance locomotives are important shources
-numbers: 472 stations and 665 miles of track 
-evercrowding
-bus connectivety 

Questions:

What arte the number of delays per month (latest year)?
What type of car are more prone to breakdown?
what stations have wheelschair acces and elevators?
Whats is the passengers capacity of each train?

------------------------------------------------------------------------------------------------------------
antepenúltimo vídeo

# --1--
#get a simple time diferrence 

select 
  arrival_time,
  departure_time,
  time_diff(departure_time, arrival_time, minute) as t_diff1
from(
select
  time "23:30:00" as arrival_time,
  time "23:35:00" as departure_time,
)
;

# --2--
select 
  arrival_time,
  departure_time,
  time_diff(cast(departure_time as time), cast(arrival_time as time), minute) as t_diff1
from(
  select *
  from `bigquery-public-data.new_york_subway.stop_times`
  #where regexp_contains(arrival)
  LIMIT 10
)
;
------------------------------------------------------------------------------------------------------------
penúltimo vídeo

Join tables: stop_times, trips and routes

select count(distinct trip_id)
from `bigquery-public-data.new_york_subway.trips`

Resultado: 19640 #number of trip IDs
------------------------------------------------------------------------------------------------------------
#QUESTIONS
------------------------------------------------------------------------------------------------------------
# How many unique route_ids are there? 
select count(distinct route_id) as count_unique_route_id
from `bigquery-public-data.new_york_subway.routes`
;
# Answer: 30
------------------------------------------------------------------------------------------------------------
# What route_id has the highest count of trip_ids? What route is busiest? (qual rota tem o maior número de viagens distintas)
select
route_id,
count(distinct trip_id) as count_unique_trip_id
from `bigquery-public-data.new_york_subway.trips`
group by route_id
order by count_unique_trip_id
;
# Answer: rota 7, com 1320 count_unique_trip_id - ver no mapa qual é a linha 7
------------------------------------------------------------------------------------------------------------
# What is the count of trip_ids for a route type?
select
route_type,
count(distinct trip_id) as count_unique_trip_id
from `bigquery-public-data.new_york_subway.trips`
  inner join `bigquery-public-data.new_york_subway.routes` using (route_id)
group by route_type
order by count_unique_trip_id
;
# Essa consulta fornece a contagem de trip_ids distintos para cada tipo de rota (route_type), ajudando a entender a distribuição da atividade de viagem com base nos tipos de rotas no sistema de metrô de Nova York.
# existem apenas dois tipos de rotas, uma delas tem mais trip id único do que a outra
------------------------------------------------------------------------------------------------------------
# What day of a week are the trips highest or lowest? propotion of trip for week
# Example: "ASP19GEN-1037-Sunday-00_081250_1..N03R" - we need a SUBSTRING to get the day of the week 
# Expression: REGEXP_SUBSTR(value,regex)
# REGEXP_SUBSTR(trip_id,r"\d+-(.*)-") #expression to get the day and the number before the date using 

SELECT
  weekday, # Seleciona a coluna 'weekday' resultante da subconsulta.
  COUNT(DISTINCT trip_id) AS count_unique_trip_id # Conta o número distinto de 'trip_id' para cada 'weekday'.
FROM (
  SELECT
    *,
    REGEXP_SUBSTR(trip_id, r"\d+-([A-Za-z]+)-") AS weekday # Extrai o dia da semana da coluna 'trip_id' usando expressão regular e atribui a uma coluna chamada 'weekday'.
  FROM `bigquery-public-data.new_york_subway.trips`
)
GROUP BY weekday # Agrupa os resultados pelo valor da coluna 'weekday'.
ORDER BY count_unique_trip_id # Ordena os resultados pelo número de 'trip_ids' únicos em ordem crescente.
;
------------------------------------------------------------------------------------------------------------
# What destination stations have the highest or lowest trip_ids?

SELECT 
  stop_headsign,
  count(distinct trip_id) as count_unique_trip_id
FROM `bigquery-public-data.new_york_subway.stop_times`
GROUP BY stop_headsign
ORDER BY count_unique_trip_id
limit 10
;
------------------------------------------------------------------------------------------------------------
# Find distinct station entrance_type
SELECT distinct entrance_type
FROM `bigquery-public-data.new_york_subway.station_entrances`
------------------------------------------------------------------------------------------------------------
# What stations have all or 5, 4, 3, 2 entrance types?
# Seleciona as estações e a contagem de tipos de entrada distintos para cada estação,
# filtrando aquelas que têm pelo menos 2 tipos de entrada.
SELECT DISTINCT
  count(distinct entrance_type) AS count_unique_entrance_type,
  station_name
FROM `bigquery-public-data.new_york_subway.station_entrances`
-- Agrupa os resultados pelo nome da entrada da estação.
GROUP BY station_name
-- Filtra as estações que têm pelo menos 2 tipos de entrada.
HAVING count_unique_entrance_type >= 2
-- Ordena os resultados pela contagem de tipos de entrada distintos em ordem decrescente.
ORDER BY count_unique_entrance_type DESC;
------------------------------------------------------------------------------------------------------------
#Did the number of passengers at 59 St increase from 2013 to 2018?
select *
from `bigquery-public-data.new_york_subway.subway_ridership_2013_present`
where regexp_contains(station_name, r'59 St')
limit 10
;
------------------------------------------------------------------------------------------------------------
# If funds to improve NY subways service were to be update
# What would be the key problems areas do tackle?
# Can you find any such relevant information based on the dataset?

# Find the sections of subway that experience delays
# BSP19GEN-FS011-Weekday-00_000000_FS.S01R


-- Cria uma CTE (Common Table Expression) chamada "timings" que contém informações relevantes sobre paradas de metrô.
WITH
timings AS (
  -- Seleciona dados específicos de paradas de metrô e junta com informações de estações.
  SELECT
    trip_id,
    route_id,
    stop_id,
    SUBSTR(stop_id, 1, 3) AS gtfs_stop_id,
    station_name,
    arrival_time,
    CAST(stop_sequence AS INT64) AS stop_sequence
  FROM (
    -- Subconsulta que seleciona dados de paradas de metrô e junta com informações de viagens.
    SELECT 
      trip_id,
      route_id,
      stop_id,
      SUBSTR(stop_id, 1, 3) AS gtfs_stop_id,
      arrival_time,
      CAST(stop_sequence AS INT64) AS stop_sequence
    FROM `bigquery-public-data.new_york_subway.stop_times`
      INNER JOIN `bigquery-public-data.new_york_subway.trips` USING(trip_id)
    WHERE trip_id = "BSP19SUPP-L022-Sunday-99_000100_L..N01X004" OR
          trip_id = "ASP19GEN-5106-Weekday-00_000200_5..S32R"
    -- LIMIT 10
  ) INNER JOIN `bigquery-public-data.new_york_subway.stations` USING (gtfs_stop_id)
)
-- Seleciona as informações relevantes juntamente com a chegada anterior usando a função LAG.
lag_time AS (
  SELECT *,
    LAG(arrival_time, 1) OVER(PARTITION BY trip_id ORDER BY stop_sequence) AS lag_arrival_time,
    LAG(station_name, 1) OVER(PARTITION BY trip_id ORDER BY stop_sequence) AS lag_station_name
  FROM timings
)

-- Seleciona informações específicas para análise de atrasos entre paradas.
SELECT
  trip_id,
  route_id,
  CONCAT(lag_station_name, ' - ', station_name) AS s1_s2
FROM lag_time;




